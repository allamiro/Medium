---
- name: Deploy Confluent Platform without SSL
  hosts: kafka
  become: yes
  vars:
    confluent_version: "7.7.1"
    confluent_archive_url: "https://packages.confluent.io/archive/7.7/confluent-community-7.7.1.tar.gz"
    confluent_archive_path: "/tmp/confluent-community-{{ confluent_version }}.tar.gz"
    confluent_extracted_dir: "/tmp/confluent-{{ confluent_version }}"
    confluent_install_dir: "/opt/confluent"
    zookeeper_data_dir: "/var/lib/zookeeper"
    zookeeper_client_port: 2181
    kafka_listeners: "PLAINTEXT://0.0.0.0:9092"
    kafka_log_dirs: "/var/lib/kafka-logs"
    schema_registry_listeners: "http://0.0.0.0:8081"
    schema_registry_bootstrap_servers: "PLAINTEXT://kafka1.example.com:9092"
    zookeeper_servers:
      - { id: 1, host: "kafka1.example.com", leaderport: 2888, electionport: 3888 }
      - { id: 2, host: "kafka2.example.com", leaderport: 2888, electionport: 3888 }
      - { id: 3, host: "kafka3.example.com", leaderport: 2888, electionport: 3888 }

  tasks:
    - name: Install dependencies
      dnf:
        name:
          - java-11-openjdk
          - unzip
          - curl
          - tar
          - wget
          - tree
          - openssl
          - coreutils
          - grep
          - setroubleshoot
          - firewalld
        state: present

    - name: Ensure firewalld is running
      service:
        name: firewalld
        state: started
        enabled: true

    - name: Allow required ports in firewalld
      firewalld:
        port: "{{ item }}"
        permanent: yes
        state: enabled
      with_items:
        - "2181/tcp"  # ZooKeeper client port
        - "2888/tcp"  # ZooKeeper leader port
        - "3888/tcp"  # ZooKeeper election port
        - "9092/tcp"  # Kafka listener port
        - "8081/tcp"  # Schema Registry port

    - name: Reload firewalld
      command: firewall-cmd --reload

    - name: Verify if the archive exists
      stat:
        path: "{{ confluent_archive_path }}"
      register: archive_stat

    - name: Download the Confluent archive if missing
      get_url:
        url: "{{ confluent_archive_url }}"
        dest: "{{ confluent_archive_path }}"
      when: not archive_stat.stat.exists

    - name: Extract Confluent Platform to /tmp
      unarchive:
        src: "{{ confluent_archive_path }}"
        dest: /tmp
        remote_src: yes
        creates: "{{ confluent_extracted_dir }}"

    - name: Remove existing /opt/confluent if it exists
      file:
        path: "{{ confluent_install_dir }}"
        state: absent

    - name: Move Confluent Platform to /opt/confluent
      command: mv "{{ confluent_extracted_dir }}" "{{ confluent_install_dir }}"

    - name: Verify Confluent directory structure
      command: ls -l "{{ confluent_install_dir }}"

    - name: Ensure ZooKeeper data directory exists
      file:
        path: "{{ zookeeper_data_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Configure ZooKeeper
      template:
        src: templates/zookeeper.properties.j2
        dest: "{{ confluent_install_dir }}/etc/kafka/zookeeper.properties"

    - name: Set myid for ZooKeeper
      copy:
        content: "{{ item.id }}"
        dest: "{{ zookeeper_data_dir }}/myid"
      with_items: "{{ zookeeper_servers }}"
      when: inventory_hostname == item.host

    - name: Configure Kafka
      template:
        src: templates/server.properties.j2
        dest: "{{ confluent_install_dir }}/etc/kafka/server.properties"

    - name: Configure Schema Registry
      template:
        src: templates/schema-registry.properties.j2
        dest: "{{ confluent_install_dir }}/etc/schema-registry/schema-registry.properties"

    - name: Start ZooKeeper
      shell: "{{ confluent_install_dir }}/bin/zookeeper-server-start {{ confluent_install_dir }}/etc/kafka/zookeeper.properties &"
      async: 0
      poll: 0

    - name: Start Kafka
      shell: "{{ confluent_install_dir }}/bin/kafka-server-start {{ confluent_install_dir }}/etc/kafka/server.properties &"
      async: 0
      poll: 0

    - name: Start Schema Registry
      shell: "{{ confluent_install_dir }}/bin/schema-registry-start {{ confluent_install_dir }}/etc/schema-registry/schema-registry.properties &"
      async: 0
      poll: 0
