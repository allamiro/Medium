---
- name: Install or Uninstall Confluent Platform with Reboot and Wait
  hosts: kafka
  become: yes
  vars:
    action: "install"  # Set to "uninstall" to remove the installation
    confluent_version: "7.7.1"
    confluent_archive_url: "https://packages.confluent.io/archive/7.7/confluent-community-7.7.1.tar.gz"
    confluent_archive_path: "/tmp/confluent-community-{{ confluent_version }}.tar.gz"
    confluent_extracted_dir: "/tmp/confluent-{{ confluent_version }}"
    confluent_install_dir: "/opt/confluent"
    zookeeper_data_dir: "/var/lib/zookeeper"
    zookeeper_client_port: 2181
    kafka_listeners: "PLAINTEXT://0.0.0.0:9092"
    kafka_log_dirs: "/var/lib/kafka-logs"
    schema_registry_listeners: "http://0.0.0.0:8081"
    schema_registry_bootstrap_servers: "PLAINTEXT://kafka1.example.com:9092"
    zookeeper_servers:
      - { id: 1, host: "kafka1.example.com", leaderport: 2888, electionport: 3888 }
      - { id: 2, host: "kafka2.example.com", leaderport: 2888, electionport: 3888 }
      - { id: 3, host: "kafka3.example.com", leaderport: 2888, electionport: 3888 }

  tasks:
    - name: Install Confluent Platform
      block:
        - name: Install dependencies
          dnf:
            name:
              - java-11-openjdk
              - unzip
              - curl
              - tar
              - wget
              - tree
              - openssl
              - coreutils
              - grep
              - setroubleshoot
              - firewalld
            state: present

        - name: Ensure firewalld is running
          service:
            name: firewalld
            state: started
            enabled: true

        - name: Allow required ports in firewalld
          firewalld:
            port: "{{ item }}"
            permanent: yes
            state: enabled
          loop:
            - "2181/tcp"
            - "2888/tcp"
            - "3888/tcp"
            - "9092/tcp"
            - "8081/tcp"

        - name: Reload firewalld
          command: firewall-cmd --reload

        - name: Verify if the archive exists
          stat:
            path: "{{ confluent_archive_path }}"
          register: archive_stat

        - name: Download the Confluent archive if missing
          get_url:
            url: "{{ confluent_archive_url }}"
            dest: "{{ confluent_archive_path }}"
          when: not archive_stat.stat.exists

        - name: Extract Confluent Platform to /tmp
          unarchive:
            src: "{{ confluent_archive_path }}"
            dest: /tmp
            remote_src: yes
            creates: "{{ confluent_extracted_dir }}"

        - name: Remove existing /opt/confluent if it exists
          file:
            path: "{{ confluent_install_dir }}"
            state: absent

        - name: Move Confluent Platform to /opt/confluent
          command: mv "{{ confluent_extracted_dir }}" "{{ confluent_install_dir }}"

        - name: Ensure ZooKeeper data directory exists
          file:
            path: "{{ zookeeper_data_dir }}"
            state: directory
            owner: root
            group: root
            mode: '0755'

        - name: Configure ZooKeeper
          template:
            src: templates/zookeeper.properties.j2
            dest: "{{ confluent_install_dir }}/etc/kafka/zookeeper.properties"

        - name: Set myid for ZooKeeper
          copy:
            content: "{{ item.id }}"
            dest: "{{ zookeeper_data_dir }}/myid"
          loop: "{{ zookeeper_servers }}"
          when: inventory_hostname == item.host

        - name: Configure Kafka
          template:
            src: templates/server.properties.j2
            dest: "{{ confluent_install_dir }}/etc/kafka/server.properties"

        - name: Configure Schema Registry
          template:
            src: templates/schema-registry.properties.j2
            dest: "{{ confluent_install_dir }}/etc/schema-registry/schema-registry.properties"

        - name: Create ZooKeeper systemd service file
          copy:
            dest: /etc/systemd/system/zookeeper.service
            content: |
              [Unit]
              Description=Apache ZooKeeper
              After=network.target

              [Service]
              Type=simple
              ExecStart=/bin/bash -c "{{ confluent_install_dir }}/bin/zookeeper-server-start {{ confluent_install_dir }}/etc/kafka/zookeeper.properties"
              ExecStop=/bin/bash -c "{{ confluent_install_dir }}/bin/zookeeper-server-stop"
              Restart=on-failure
              User=root

              [Install]
              WantedBy=multi-user.target

        - name: Create Kafka systemd service file
          copy:
            dest: /etc/systemd/system/kafka.service
            content: |
              [Unit]
              Description=Apache Kafka
              After=zookeeper.service

              [Service]
              Type=simple
              ExecStart=/bin/bash -c "{{ confluent_install_dir }}/bin/kafka-server-start {{ confluent_install_dir }}/etc/kafka/server.properties"
              ExecStop=/bin/bash -c "{{ confluent_install_dir }}/bin/kafka-server-stop"
              Restart=on-failure
              User=root

              [Install]
              WantedBy=multi-user.target

        - name: Create Schema Registry systemd service file
          copy:
            dest: /etc/systemd/system/schema-registry.service
            content: |
              [Unit]
              Description=Schema Registry
              After=kafka.service

              [Service]
              Type=simple
              ExecStart=/bin/bash -c "{{ confluent_install_dir }}/bin/schema-registry-start {{ confluent_install_dir }}/etc/schema-registry/schema-registry.properties"
              ExecStop=/bin/bash -c "{{ confluent_install_dir }}/bin/schema-registry-stop"
              Restart=on-failure
              User=root

              [Install]
              WantedBy=multi-user.target

        - name: Reload systemd daemon
          command: systemctl daemon-reload

        - name: Reboot the servers
          reboot:
            msg: "Rebooting to ensure services will start cleanly."

        - name: Wait for servers to become available
          wait_for_connection:
            delay: 10
            timeout: 300

        - name: Start and enable ZooKeeper
          service:
            name: zookeeper
            state: started
            enabled: true

        - name: Start and enable Kafka
          service:
            name: kafka
            state: started
            enabled: true

        - name: Start and enable Schema Registry
          service:
            name: schema-registry
            state: started
            enabled: true

      when: action == "install"

    - name: Uninstall Confluent Platform
      block:
        - name: Stop and disable Schema Registry
          service:
            name: schema-registry
            state: stopped
            enabled: false
          ignore_errors: yes

        - name: Stop and disable Kafka
          service:
            name: kafka
            state: stopped
            enabled: false
          ignore_errors: yes

        - name: Stop and disable ZooKeeper
          service:
            name: zookeeper
            state: stopped
            enabled: false
          ignore_errors: yes

        - name: Remove systemd service files
          file:
            path: /etc/systemd/system/{{ item }}
            state: absent
          loop:
            - zookeeper.service
            - kafka.service
            - schema-registry.service

        - name: Reload systemd daemon
          command: systemctl daemon-reload

        - name: Remove Confluent installation directory
          file:
            path: "{{ confluent_install_dir }}"
            state: absent

        - name: Remove ZooKeeper data directory
          file:
            path: "{{ zookeeper_data_dir }}"
            state: absent

        - name: Remove Kafka log directories
          file:
            path: "{{ kafka_log_dirs }}"
            state: absent

        - name: Remove Confluent archive from /tmp
          file:
            path: "{{ confluent_archive_path }}"
            state: absent

        - name: Remove extracted Confluent directory from /tmp
          file:
            path: "{{ confluent_extracted_dir }}"
            state: absent

        - name: Remove myid files from ZooKeeper data dir
          file:
            path: "{{ zookeeper_data_dir }}/myid"
            state: absent

        - name: Remove firewall rules
          firewalld:
            port: "{{ item }}"
            permanent: yes
            state: disabled
          loop:
            - "2181/tcp"
            - "2888/tcp"
            - "3888/tcp"
            - "9092/tcp"
            - "8081/tcp"

        - name: Reload firewalld
          command: firewall-cmd --reload

        - name: Reboot the servers
          reboot:
            msg: "Rebooting after uninstallation to ensure clean state."

        - name: Wait for servers to become available
          wait_for_connection:
            delay: 10
            timeout: 300

      when: action == "uninstall"

